from tkinter import *import sysfrom tkinter import ttkimport tkinter as tkfrom tkinter import messagebox as mBoxfrom tkinter import simpledialogimport psycopg2import osfrom datetime import datefrom datetime import datetimeimport datetimeimport uuidimport playsoundfrom tkcalendar import Calendar,DateEntryclass LoginFrame(Frame):    def __init__(self, master):        super().__init__(master)        self.vcmd = (root.register(self.validate), '%d', '%i', '%P', '%s', '%S', '%v', '%V', '%W')        self.image = tk.PhotoImage(file="lgbutton.png")        self.labelimage=Label(self,image=self.image)        self.label_username = Label(self, text="Username")        self.label_password = Label(self, text="Password")        self.entry_username = Entry(self)        self.entry_password = Entry(self, show="*")        self.labelimage.grid(row=0,column=1)        self.label_username.grid(row=1, sticky=E)        self.label_password.grid(row=2, sticky=E)        self.entry_username.grid(row=1, column=1)        self.entry_password.grid(row=2, column=1)        self.logbtn = Button(self, text="Login", command=self._login_btn_clicked)        self.logbtn.grid(columnspan=2)        self.pack()    def validate(self,action, index, value_if_allowed, prior_value, text, validation_type, trigger_type, widget_name):        if text in '0123456789.-+':            try:                float(value_if_allowed)                return True            except ValueError:                return False        else:            playsound.playsound('1.mp3', True)            mBox.showwarning('  Error  ', "  Please Insert Numbers Only  ")    def AddStock(self):        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        cur.execute("SELECT cname from category")        rows = cur.fetchall()        choices = ""        for row in rows:            choices = choices + row[0] + ","        choices = choices.split(",")        filewin = Toplevel(root)        pro = ttk.LabelFrame(filewin, text='  Add New Product')        pro.grid(column=0, row=0, padx=8, pady=4)        ttk.Label(pro, text="Enter Product Name:").grid(column=0, row=0, sticky='W')        pname = tk.StringVar()        ttk.Entry(pro, textvariable=pname).grid(column=45, row=0, sticky='W')        ttk.Label(pro, text="Enter Product Detail:").grid(column=0, row=2, sticky='W')        pdetail = tk.StringVar()        ttk.Entry(pro, textvariable=pdetail).grid(column=45, row=2, sticky='W')        ttk.Label(pro, text="Enter Product Type:").grid(column=0, row=4, sticky='W')        ptype = tk.StringVar()        ttk.Entry(pro, textvariable=ptype).grid(column=45, row=4, sticky='W')        ttk.Label(pro, text="Enter Product's Price").grid(column=0, row=6, sticky='W')        pprice = tk.StringVar()        ttk.Entry(pro, textvariable=pprice, validate='key', validatecommand=self.vcmd).grid(column=45, row=6, sticky='W')        ttk.Label(pro, text="Enter Product's Quantity").grid(column=0, row=8, sticky='W')        pqty = tk.StringVar()        e = ttk.Entry(pro, textvariable=pqty, validate='key', validatecommand=self.vcmd).grid(column=45, row=8, sticky='W')        ttk.Label(pro, text="Select Product's Category").grid(column=0, row=10, sticky='W')        variable = StringVar(filewin)        popupMenu = OptionMenu(pro, variable, *choices)        popupMenu.grid(row=10, column=30)        Button(pro, text="Submit",               command=lambda:self.Insert_Record(pname.get(), pdetail.get(), ptype.get(), pprice.get(), pqty.get(),                                             variable.get())).grid(column=10, row=12, sticky='W')        Button(pro, text="Close", command=lambda: self.close(pro)).grid(column=45, row=12, sticky='W')    def Insert_Record(self,pnam, pdetail, ptype, pprice, pqty, cat):        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        num = 0        cur = conn.cursor()        cur.execute("SELECT max(pid) from PRODUCT")        rows = cur.fetchall()        for row in rows:            num = row[0]        num = num + 1        cur = conn.cursor()        cur.execute("SELECT * from PRODUCT")        rows = cur.fetchall()        if rows:            cur.execute("INSERT INTO PRODUCT (PID, PDETAIL, PNAME, PTYPE, PPRICE, qty, category ) VALUES \                              (" + str(                num) + ",'" + pdetail + "','" + pnam + "','" + ptype + "'," + str(pprice) + "," + str(                pqty) + ",'" + cat + "')");            mBox.showinfo('  Rental System  ', "  Data Inserted Successfully  ")        else:           mBox.showinfo('  Rental System  ', "  Data Not Inserted   ")        conn.commit()        conn.close()    def UpdateStock(self):        filewin = Toplevel()        # Add a grid        mainframe = LabelFrame(filewin, text="Please choose the product from the dropdown below:")        mainframe.grid(column=45, row=0, sticky='W')        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        cur.execute("SELECT Pname from PRODUCT")        rows = cur.fetchall()        choices = ""        for row in rows:            choices = choices + row[0] + ","        choices = choices.split(",")        # Dropdown Menu        self.dropVar = StringVar()        self.dropVar.set("Click to view options")  # default choice        self.dropMenu1 = OptionMenu(mainframe, self.dropVar, *choices)        self.dropMenu1.pack()        self.dropVar.trace("w", self.get_selection_Update_Stock)    def get_selection_Update_Stock(self, *args):        filewin = Toplevel(root)        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        s = self.dropVar.get()        cur.execute("SELECT * from Product where pname='" + s + "'")        rows = cur.fetchall()        pname = ""        pdetails = ""        ptype = ""        pprice = 0        pqtys = 0        for row in rows:            pname = row[1]            pdetails = row[2]            ptype = row[3]            pprice = row[4]            pqtys = row[5]        reg = ttk.LabelFrame(filewin, text=' Update Stock')        reg.grid(column=0, row=0, padx=8, pady=4)        ttk.Label(reg, text="Enter Product Name:").grid(column=0, row=0, sticky='W')        name = tk.StringVar(value=pname)        ttk.Entry(reg, textvariable=name,state=DISABLED).grid(column=45, row=0, sticky='W')        ttk.Label(reg, text="Enter Details").grid(column=0, row=2, sticky='W')        add = tk.StringVar(value=pdetails)        ttk.Entry(reg, textvariable=add).grid(column=45, row=2, sticky='W')        ttk.Label(reg, text="Enter Product Type:").grid(column=0, row=4, sticky='W')        mnbr = tk.StringVar(value=ptype)        ttk.Entry(reg, textvariable=mnbr).grid(column=45, row=4, sticky='W')        ttk.Label(reg, text="Enter Price of Product").grid(column=0, row=6, sticky='W')        email = tk.StringVar(value=pprice)        ttk.Entry(reg, textvariable=email, validate='key', validatecommand=self.vcmd).grid(column=45, row=6, sticky='W')        ttk.Label(reg, text="Enter Quantity of Product").grid(column=0, row=8, sticky='W')        pqty = tk.StringVar(value=pqtys)        ttk.Entry(reg, textvariable=pqty, validate='key', validatecommand=self.vcmd).grid(column=45, row=8, sticky='W')        Button(reg, text="Submit",               command=lambda:self.Update_Record(name.get(), add.get(), mnbr.get(), email.get(), pqty.get())).grid(column=10, row=10, sticky='W')        Button(reg, text="Close", command=lambda: self.close(reg)).grid(column=45, row=10, sticky='W')    def Update_Record(self,nam, address, mnum, e_mail, qty):        print(nam)        print(address)        print(mnum)        print(e_mail)        print(qty)        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        cur.execute(            "UPDATE product set PDETAIL='" + nam + "', PTYPE='" + mnum + "',pprice=" + e_mail + ", QTY=" + qty + " where PNAME='" + address+ "'")        mBox.showinfo('  Rental System  ', "  Data  Inserted Successfully  ")        conn.commit()        conn.close()    def DeleteProduct(self,pd):        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        result = mBox.askquestion("Delete", "Are You Sure?", icon='warning')        if result == 'yes':            cur.execute("delete from PRODUCT  where pname='" + pd + "'");            mBox.showinfo('  Rental System  ', "  Data Deleted Successfully  ")        else:            mBox.showinfo('  Rental System  ', "  Data Not Deleted   ")        conn.commit()        conn.close()    def DeleteStock(self):        filewin = Toplevel()        # Add a grid        mainframe = LabelFrame(filewin, text="Please choose the product from the dropdown below:")        mainframe.grid(column=45, row=0, sticky='W')        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        cur.execute("SELECT Pname from PRODUCT")        rows = cur.fetchall()        choices = ""        for row in rows:            choices = choices + row[0] + ","        choices = choices.split(",")        self.dropVardel = StringVar()        self.dropVardel.set("Click to view options")  # default choice        self.dropMenudel = OptionMenu(mainframe, self.dropVardel, *choices)        self.dropMenudel.pack()        self.dropVardel.trace("w", self.change_dropdown_delete_stock)    def change_dropdown_delete_stock(self, *args):        s = self.dropVardel.get()        print(s)        if s != "Click to view options":            filewin = Toplevel()            conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                    port="5432")            cur = conn.cursor()            cur.execute("SELECT * from Product where pname='" + s + "'")            rows = cur.fetchall()            pname = ""            for row in rows:                pname = row[2]            delete = ttk.LabelFrame(filewin, text='  Delete Product  ')            delete.grid(column=0, row=0, padx=8, pady=4)            ttk.Label(delete, text="Enter Product Name:").grid(column=0, row=0, sticky='W')            pd = tk.StringVar(value=pname)            ttk.Entry(delete, textvariable=pd).grid(column=45, row=0, sticky='W')            Button(delete, text="Submit", command=lambda: self.DeleteProduct(pd.get())).grid(column=15, row=10,                                                                                             sticky='W')            Button(delete, text="Close", command=lambda: self.close(delete)).grid(column=45, row=10, sticky='W')    def DeleteGoods(self):        filewin = Toplevel(root)        mainf = LabelFrame(filewin, text="Select Goods to Delete:-----------------")        mainf.grid(column=0, row=0, sticky='W')        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                port="5432")        cur = conn.cursor()        cur.execute("SELECT DPNAME from DAMAGED")        rows = cur.fetchall()        choices = ""        for row in rows:            choices = choices + row[0] + ","        choices = choices.split(",")        OPTIONS = choices  # etc        variable = StringVar(mainf)        variable.set("Select -----")        w = OptionMenu(mainf, variable, *OPTIONS)        w.grid(column=1, row=0, sticky='W')        def ok():            answer = variable.get()            conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",port="5432")            cur = conn.cursor()            result = mBox.askquestion("Delete", "Are You Sure?", icon='warning')            if result == 'yes':                cur.execute("DELETE from DAMAGED where DPNAME='" + answer + "'")                mBox.showinfo('  Rental System  ', "  Data Deleted Successfully  ")            else:                mBox.showinfo('  Rental System  ', "  Data Not Deleted   ")            conn.commit()            conn.close()        button = Button(mainf, text="OK", command=ok)        button.grid(column=45, row=0, sticky='W')    def Search(self):        filewin = Toplevel(root)        ser = ttk.LabelFrame(filewin, text='  Search Product  ')        ser.grid(column=0, row=0, padx=8, pady=4)        ttk.Label(ser, text="Enter Product Name:").grid(column=0, row=0, sticky='W')        pd = tk.StringVar()        ttk.Entry(ser, textvariable=pd).grid(column=45, row=0, sticky='W')        Button(ser, text="Submit", command=lambda:self.Show_Pro_Record(pd.get())).grid(column=15, row=10, sticky='W')        Button(ser, text="Close", command=lambda:self.close(ser)).grid(column=45, row=10, sticky='W')    def AddCategory(self):        filewin = Toplevel(root)        pro = ttk.LabelFrame(filewin, text='  Add New Category')        pro.grid(column=0, row=0, padx=8, pady=4)        ttk.Label(pro, text="Enter Product Category:").grid(column=0, row=0, sticky='W')        pname = tk.StringVar()        ttk.Entry(pro, textvariable=pname).grid(column=45, row=0, sticky='W')        Button(pro, text="Submit", command=lambda: self.Insert_Category(pname.get())).grid(column=10, row=12,                                                                                            sticky='W')        Button(pro, text="Close", command=lambda: self.close(pro)).grid(column=45, row=12, sticky='W')    def Insert_Category(self, pd):        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        cur.execute("INSERT INTO category (CID, CNAME) VALUES ('" + str(uuid.uuid4()) + "','" + pd + "')");        mBox.showinfo('  Rental System  ', "  Data Inserted Successfully  ")        conn.commit()        conn.close()    def RemCategory(self):        filewin = Toplevel(root)        pro = ttk.LabelFrame(filewin, text=' Remove Category')        pro.grid(column=0, row=0, padx=8, pady=4)        ttk.Label(pro, text="Enter Product Category:").grid(column=0, row=0, sticky='W')        pname = tk.StringVar()        ttk.Entry(pro, textvariable=pname).grid(column=45, row=0, sticky='W')        Button(pro, text="Submit", command=lambda:self.Remove_Category(pname.get())).grid(column=10, row=12, sticky='W')        Button(pro, text="Close", command=lambda: self.close(pro)).grid(column=45, row=12, sticky='W')    def Remove_Category(self,pd):        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        result = mBox.askquestion("Delete", "Are You Sure?", icon='warning')        if result == 'yes':            cur.execute("delete from category  where cname='" + pd + "'");            mBox.showinfo('  Rental System  ', "  Data Deleted Successfully  ")        else:            mBox.showinfo('  Rental System  ', "  Data Not Deleted  ")        conn.commit()        conn.close()    def Today_Sale(self):        filewin = Toplevel(root)        mainf = LabelFrame(filewin, text="Select Date")        mainf.grid(column=0, row=0, sticky='W')        cal = DateEntry(mainf, width=12, background='darkblue',foreground='white', borderwidth=2)        cal.grid(column=0, row=0, sticky='W')        def Submit():            todaydate=cal.get()            mainframe = LabelFrame(filewin, text="Today's Sale")            mainframe.grid(column=0, row=1, sticky='W')            Label(mainframe, text="Product Category").grid(column=0, row=1, sticky='W')            Label(mainframe, text="Total Revenue (in Rupees)").grid(column=1, row=1, sticky='W')            conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                    port="5432")            cur = conn.cursor()            cur.execute("SELECT category, sum(trd_price) from TRD where TRD_DATE='" + str(todaydate) +                        "'group by category")            rows = cur.fetchall()            rs = []            i = 10            for row in rows:                cols = []                for j in range(2):                    e = Entry(mainframe, relief=RIDGE)                    e.grid(row=i, column=j, sticky=NSEW)                    e.insert(END, '%s' % (row[j]))                    cols.append(e)                i = i + 1                rs.clear()                rs.append(cols)            conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                    port="5432")            cur = conn.cursor()            cur.execute("SELECT sum(trd_price) as GrandTotal from TRD where TRD_DATE='" + str(todaydate) + "'")            rows = cur.fetchall()            for row in rows:                cols = []                e = Entry(mainframe, relief=RIDGE)                e.grid(row=i, column=0, sticky=NSEW)                e.insert(END, '%s' % ("Total"))                cols.append(e)                e = Entry(mainframe, relief=RIDGE)                e.grid(row=i, column=1, sticky=NSEW)                e.insert(END, '%s' % (row[0]))                cols.append(e)                rs.clear()                rs.append(cols)        def Print_Report():            todaydate = cal.get()            conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                    port="5432")            cur = conn.cursor()            cur.execute("SELECT category, sum(trd_price) from TRD where TRD_DATE='" + str(                todaydate) + "' group by category")            rows = cur.fetchall()            rs = []            i = 10            f = open("demofile.txt", "w")            f.write("           Report          \n")            f.write("Product Category    |   Total Revenue          \n")            for row in rows:                f.write(str(row[0]).ljust(5,' ')+"     |   "+str(row[1])+"\n")            conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                    port="5432")            cur = conn.cursor()            cur.execute("SELECT sum(trd_price) from TRD where TRD_DATE='" + str(todaydate) + "'")            rows = cur.fetchall()            for row in rows:                f.write("Total               |   "+str(row[0])+"\n")            os.startfile("demofile.txt", "print")        button=Button(mainf,text="Submit", command=Submit)        button.grid(column=45, row=0, sticky='W')        button = Button(mainf, text="Print Report", command=Print_Report)        button.grid(column=60, row=0, sticky='W')    def Weekly_Sale(self):        filewin = Toplevel(root)        mainframe = LabelFrame(filewin, text="Weekly Sale")        mainframe.grid(column=45, row=0, sticky='W')        Label(mainframe, text="Product Category").grid(column=0, row=0, sticky='W')        Label(mainframe, text="Total Revenue(in Rupees)").grid(column=1, row=0, sticky='W')        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        from datetime import datetime        from datetime import timedelta        d1 = datetime.now() - timedelta(days=7)        cur.execute(            "SELECT category, sum(trd_price) from TRD where TRD_DATE<='" + str(d1.today()) + "' group by category")        rows = cur.fetchall()        rs = []        i = 10        for row in rows:            cols = []            for j in range(2):                e = Entry(mainframe, relief=RIDGE)                e.grid(row=i, column=j, sticky=NSEW)                e.insert(END, '%s' % (row[j]))                cols.append(e)            i = i + 1            rs.clear()            rs.append(cols)    def Ret_Month(self,mnth):        m = 0        if mnth == "Jan":            m = 1        if mnth == "Feb":            m = 2        if mnth == "Mar":            m = 3        if mnth == "Apr":            m = 4        if mnth == "May":            m = 5        if mnth == "Jun":            m = 6        if mnth == "Jul":            m = 7        if mnth == "Aug":            m = 8        if mnth == "Sep":            m = 9        if mnth == "Oct":            m = 10        if mnth == "Nov":            m = 11        if mnth == "Dec":            m = 12        return m    def Monthly_Sale(self):        filewin = Toplevel(root)        mainf = LabelFrame(filewin, text="Select ------------------------------------------")        mainf.grid(column=0, row=0, sticky='W')        OPTIONS = ["Select Month","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]  # etc        variable = StringVar(mainf)        variable.set(OPTIONS[0])        w = OptionMenu(mainf, variable, *OPTIONS)        w.grid(column=1, row=0, sticky='W')        OPTIONS1 = ["Select Year","2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"]  # etc        variable2 = StringVar(mainf)        variable2.set(OPTIONS1[0])        z = OptionMenu(mainf, variable2, *OPTIONS1)        z.grid(column=2, row=0, sticky='W')        def ok():            answer= variable.get()            year=variable2.get()            conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")            cur = conn.cursor()            m = self.Ret_Month(answer)            if m > 0:                mainframe = LabelFrame(filewin, text="Monthly Sale")                mainframe.grid(column=0, row=1, sticky='W')                Label(mainframe, text="Product Category").grid(column=0, row=1, sticky='W')                Label(mainframe, text="Total Revenue (in Rupees)").grid(column=1, row=1, sticky='W')                d1 = datetime.datetime(int(year), m, 1).strftime("%Y-%m-%d")                if m==2:                    d2=datetime.datetime(int(year), m, 28).strftime("%Y-%m-%d")                else:                    d2=datetime.datetime(int(year), m, 30).strftime("%Y-%m-%d")                cur.execute("SELECT category, sum(trd_price) from TRD where TRD_DATE>='" + str(d1) + "' and TRD_DATE<='" + str(d2) + "' group by category")                rows = cur.fetchall()                rs = []                i = 10                for row in rows:                    cols = []                    for j in range(2):                        e = Entry(mainframe, relief=RIDGE)                        e.grid(row=i, column=j, sticky=NSEW)                        e.insert(END, '%s' % (row[j]))                        cols.append(e)                    i = i + 1                    rs.clear()                    rs.append(cols)                conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                        port="5432")                cur = conn.cursor()                cur.execute("SELECT  sum(trd_price) as GrandTotal from TRD where TRD_DATE>'" + str(d1) + "' and TRD_DATE<'" + str(d2)  + "'")                rows = cur.fetchall()                for row in rows:                    cols = []                    e = Entry(mainframe, relief=RIDGE)                    e.grid(row=i, column=0, sticky=NSEW)                    e.insert(END, '%s' % ("Total"))                    cols.append(e)                    e = Entry(mainframe, relief=RIDGE)                    e.grid(row=i, column=1, sticky=NSEW)                    e.insert(END, '%s' % (row[0]))                    cols.append(e)                    rs.clear()                    rs.append(cols)            else:                filewin.withdraw()                mBox.showwarning("Rental System ", "Please Enter Correct Month")        button = Button(mainf, text="OK", command=ok)        button.grid(column=45, row=0, sticky='W')    def Halfyearly_Sale(self):        filewin = Toplevel(root)        mainframe = LabelFrame(filewin, text="Halfyearly Sale")        mainframe.grid(column=45, row=0, sticky='W')        Label(mainframe, text="Product Category").grid(column=0, row=0, sticky='W')        Label(mainframe, text="Total Revenue (in Rupees)").grid(column=1, row=0, sticky='W')        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        from datetime import datetime        from datetime import timedelta        d1 = datetime.now() - timedelta(days=180)        d2 = datetime.now()        cur.execute("SELECT category, sum(trd_price) from TRD where TRD_DATE>='" + str(d1)  + "' AND TRD_DATE<='" + str(d2)   + "' group by category")        rows = cur.fetchall()        rs = []        i = 10        for row in rows:            cols = []            for j in range(2):                e = Entry(mainframe, relief=RIDGE)                e.grid(row=i, column=j, sticky=NSEW)                e.insert(END, '%s' % (row[j]))                cols.append(e)            i = i + 1            rs.clear()            rs.append(cols)        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        cur.execute("SELECT sum(trd_price) as GrandTotal from TRD where TRD_DATE>='" + str(d1)  + "' AND TRD_DATE<='" + str(d2)  + "'")        rows = cur.fetchall()        for row in rows:            cols = []            e = Entry(mainframe, relief=RIDGE)            e.grid(row=i, column=0, sticky=NSEW)            e.insert(END, '%s' %("Total"))            cols.append(e)            e = Entry(mainframe, relief=RIDGE)            e.grid(row=i, column=1, sticky=NSEW)            e.insert(END, '%s' % (row[0]))            cols.append(e)            rs.clear()            rs.append(cols)    def Annual_Sale(self):        filewin = Toplevel(root)        mainf = LabelFrame(filewin, text="Select Year")        mainf.grid(column=0, row=0, sticky='W')        OPTIONS1 = ["Select Year", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018",                    "2019", "2020", "2021","2022"]  # etc        variable2 = StringVar(mainf)        variable2.set(OPTIONS1[0])        z = OptionMenu(mainf, variable2, *OPTIONS1)        z.grid(column=2, row=0, sticky='W')        def ok():            from datetime import datetime            y = int(variable2.get())            m = 4            d = 1            d2 = datetime.replace(datetime.now(), y, m, d)            d1 = datetime.replace(datetime.now(), y+1, 3, 31)            mainframe = LabelFrame(filewin, text="Annual Sale")            mainframe.grid(column=45, row=0, sticky='W')            Label(mainframe, text="Product Category").grid(column=0, row=0, sticky='W')            Label(mainframe, text="Total Revenue (in Rupees)").grid(column=1, row=0, sticky='W')            conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")            cur = conn.cursor()            cur.execute("SELECT category, sum(trd_price) from TRD where TRD_DATE<='" + str(d1.date()) + "' and TRD_DATE>='"+str(d2.date())+"' group by category")            rows = cur.fetchall()            rs = []            i = 10            for row in rows:                cols = []                for j in range(2):                    e = Entry(mainframe, relief=RIDGE)                    e.grid(row=i, column=j, sticky=NSEW)                    e.insert(END, '%s' % (row[j]))                    cols.append(e)                i = i + 1                rs.clear()                rs.append(cols)            conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")            cur = conn.cursor()            cur.execute("SELECT sum(trd_price) from TRD where TRD_DATE<='" + str(d1.date()) + "' and TRD_DATE>='"+str(d2.date())+"'")            rows = cur.fetchall()            for row in rows:                cols = []                e = Entry(mainframe, relief=RIDGE)                e.grid(row=i, column=0, sticky=NSEW)                e.insert(END, '%s' % ("Total"))                cols.append(e)                e = Entry(mainframe, relief=RIDGE)                e.grid(row=i, column=1, sticky=NSEW)                e.insert(END, '%s' % (row[0]))                cols.append(e)                rs.clear()                rs.append(cols)        button = Button(mainf, text="Click", command=ok)        button.grid(column=45, row=0, sticky='W')    def Show_Stock(self):        filewin = Toplevel(root)        mainframe = LabelFrame(filewin, text="Total Stock")        mainframe.grid(column=45, row=0, sticky='W')        Label(mainframe, text="Product Name").grid(column=0, row=0, sticky='W')        Label(mainframe, text="Product Detail").grid(column=1, row=0, sticky='W')        Label(mainframe, text="Product category").grid(column=2, row=0, sticky='W')        Label(mainframe, text="Product Price").grid(column=3, row=0, sticky='W')        Label(mainframe, text="Product Quantity").grid(column=4, row=0, sticky='W')        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        cur.execute("SELECT PNAME,PDETAIL,category,PPRICE,QTY from Product")        rows = cur.fetchall()        rs = []        i = 10        for row in rows:            cols = []            for j in range(5):                e = Entry(mainframe, relief=RIDGE)                e.grid(row=i, column=j, sticky=NSEW)                e.insert(END, '%s' % (row[j]))                cols.append(e)            i = i + 1            rs.clear()            rs.append(cols)    def Emp_Record(self):        filewin = Toplevel(root)        mainframe = LabelFrame(filewin, text="Employee Record")        mainframe.grid(column=45, row=0, sticky='W')        Label(mainframe, text="Employee Name").grid(column=0, row=0, sticky='W')        Label(mainframe, text="Employee Address").grid(column=1, row=0, sticky='W')        Label(mainframe, text="Emp Phone Number").grid(column=2, row=0, sticky='W')        Label(mainframe, text="Emp Age").grid(column=3, row=0, sticky='W')        Label(mainframe, text="Emp Status").grid(column=4, row=0, sticky='W')        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        cur.execute("SELECT uname,address,mnum,age,ustatus from usr")        rows = cur.fetchall()        rs = []        i = 10        for row in rows:            cols = []            for j in range(5):                e = Entry(mainframe, relief=RIDGE)                e.grid(row=i, column=j, sticky=NSEW)                e.insert(END, '%s' % (row[j]))                cols.append(e)            i = i + 1            rs.clear()            rs.append(cols)    def Show_DGoods(self):        filewin = Toplevel(root)        mainframe = LabelFrame(filewin, text="Damaged Goods Record")        mainframe.grid(column=45, row=0, sticky='W')        Label(mainframe, text="Product Name").grid(column=0, row=0, sticky='W')        Label(mainframe, text="Product Quantity").grid(column=1, row=0, sticky='W')        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        cur.execute("SELECT DPNAME,DPQTY from DAMAGED")        rows = cur.fetchall()        rs = []        i = 10        for row in rows:            cols = []            for j in range(2):                e = Entry(mainframe, relief=RIDGE)                e.grid(row=i, column=j, sticky=NSEW)                e.insert(END, '%s' % (row[j]))                cols.append(e)            i = i + 1            rs.clear()            rs.append(cols)    def Print_Record(self,prsdetail, pscust, psqty):        price = 0        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        cur.execute("SELECT pprice from PRODUCT where PNAME='" + prsdetail + "'")        rows = cur.fetchall()        for row in rows:            price = row[0]        psqty = int(psqty)        tprice = price * psqty        prsdetail = prsdetail.ljust(11,' ')        f = open(pscust+str(date.today())+"demofile.txt", "w")        f.write("           RECEIPT          \n")        f.write("   No.14 dated:   ")        f.write(str(date.today()) + "\n")        f.write("      Mahatma Gandhi Marg,  \n")        f.write("      Hazratganj, Lucknow   \n")        f.write("  **************************** \n")        f.write("       Thanks for Coming      \n")        f.write("         WHEE Sports         \n")        f.write("    *********************** \n")        f.write("Name ********* QTY ********* Rate \n")        f.write(prsdetail[0:11])        f.write("     ")        f.write(str(psqty))        f.write("            ")        f.write(str(price))        f.write("\n             ----------\n")        f.write("TOTAL:          ")        f.write(str(tprice))        f.write("\n             ----------\n")        f.write("Thanks  ")        f.write(pscust)        os.startfile(pscust+str(date.today())+"demofile.txt", "print")    def Show_Pro_Record(self,pd):        filewin = Toplevel(root)        mainframe = LabelFrame(filewin, text="Total Stock")        mainframe.grid(column=45, row=0, sticky='W')        Label(mainframe, text="Product Name").grid(column=0, row=0, sticky='W')        Label(mainframe, text="Product Detail").grid(column=1, row=0, sticky='W')        Label(mainframe, text="Product category").grid(column=2, row=0, sticky='W')        Label(mainframe, text="Product Price").grid(column=3, row=0, sticky='W')        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        cur.execute("SELECT Pname, pdetail, ptype, pprice  from PRODUCT where pname='" + pd + "'")        rows = cur.fetchall()        rs = []        i = 10        for row in rows:            cols = []            for j in range(4):                e = Entry(mainframe, relief=RIDGE)                e.grid(row=i, column=j, sticky=NSEW)                e.insert(END, '%s' % (row[j]))                cols.append(e)            i = i + 1            rs.clear()            rs.append(cols)    def RentProduct(self):        filewin = Toplevel()        mainframe = LabelFrame(filewin, text="Please choose the product from the dropdown below:")        mainframe.grid(column=45, row=0, sticky='W')        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        cur.execute("SELECT Pname from PRODUCT where qty>0")        rows = cur.fetchall()        choices = ""        for row in rows:            choices = choices + row[0] + ","        choices = choices.split(",")        self.dropVarRent = StringVar()        self.dropVarRent.set("Click to view options")  # default choice        self.dropMenuRent = OptionMenu(mainframe, self.dropVarRent, *choices)        self.dropMenuRent.pack()        self.dropVarRent.trace("w", self.change_dropdownr)    def Insert_Pro_Rent_Record(self,pr_detail, pcust, ptype, pdur, pqty, prcat):        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        pprice = 0        cur = conn.cursor()        cur.execute("SELECT PPRICE From PRODUCT where PNAME='" + pr_detail + "'")        rows = cur.fetchall()        if rows:            for row in rows:                pprice = row[0]            pprice = pprice * (.60) * int(pqty) * int(pdur)            conn.commit()            conn.close()            conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",port="5432")            cur = conn.cursor()            from datetime import datetime            from datetime import timedelta            d1 = datetime.now() + timedelta(days=int(pdur))            cur.execute("INSERT INTO PRENT (PRID, PRPRODUCT, PRCUST, PRTYPE, PRENTDUR, PQTY, PPRICE,PRENTDATE,"                        "PRENTDUEDATE, RFLAG) VALUES \                           ('" + str(uuid.uuid4()) + "','" + pr_detail + "','" + pcust + "','" + ptype + "'," + str(pdur) + ","                        + str(pqty) + "," + str(pprice) + ",'"+str(date.today())+"','"+str(d1.date())+"'" +" , 'False')");            mBox.showinfo('  Data Inserted Successfully  ', '  Data Inserted Successfully  ')            conn.commit()            conn.close()            conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                    port="5432")            cur = conn.cursor()            cur.execute("INSERT INTO TRD (trd_date, trd_product, trd_price, trd_cid, trd_id, category) VALUES \                                                ('" + str(date.today()) + "','" + pr_detail + "'," + str(                pprice) + ",'" + pcust + "','" + str(uuid.uuid4()) + "', '" + prcat + "')");            conn.commit()            conn.close()            conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",port="5432")            cur = conn.cursor()            cur.execute("UPDATE product set  QTY=QTY-" + pqty + " where PNAME='" + pr_detail + "'")            conn.commit()            conn.close()        else:            mBox.showinfo('  Rental System  ', "  Data Not Inserted  ")    def change_dropdownr(self,*args):        s = self.dropVarRent.get()        if s != "Click to view options":            filewin = Toplevel()            conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                    port="5432")            cur = conn.cursor()            cur.execute("SELECT pname,ptype,category from Product where pname='" + s + "'")            rows = cur.fetchall()            pname = ""            ptype = ""            pcategory = ""            for row in rows:                pname = row[0]                ptype = row[1]                pcategory = row[2]            rent = ttk.LabelFrame(filewin, text='   Rent Product')            rent.grid(column=0, row=0, padx=8, pady=4)            ttk.Label(rent, text="Enter Product Name:").grid(column=0, row=0, sticky='W')            pr_detail = tk.StringVar(value=pname)            ttk.Entry(rent, textvariable=pr_detail).grid(column=45, row=0, sticky='W')            ttk.Label(rent, text="Enter Customer Name:").grid(column=0, row=2, sticky='W')            pcust = tk.StringVar()            ttk.Entry(rent, textvariable=pcust).grid(column=45, row=2, sticky='W')            ttk.Label(rent, text="Enter Product Type:").grid(column=0, row=4, sticky='W')            prentype = tk.StringVar(value=ptype)            ttk.Entry(rent, textvariable=prentype).grid(column=45, row=4, sticky='W')            ttk.Label(rent, text="Enter Product Rent Duration:").grid(column=0, row=6, sticky='W')            pdur = tk.StringVar()            ttk.Entry(rent, textvariable=pdur, validate='key', validatecommand=self.vcmd).grid(column=45, row=6, sticky='W')            ttk.Label(rent, text="Enter Product Category:").grid(column=0, row=8, sticky='W')            prcat = tk.StringVar(value=pcategory)            ttk.Entry(rent, textvariable=prcat).grid(column=45, row=8, sticky='W')            ttk.Label(rent, text="Enter Product Quantity:").grid(column=0, row=10, sticky='W')            pqty = tk.StringVar()            ttk.Entry(rent, validate='key', validatecommand=self.vcmd, textvariable=pqty).grid(column=45, row=10, sticky='W')            Button(rent, text="Submit",                   command=lambda:self.Insert_Pro_Rent_Record(pr_detail.get(), pcust.get(), prentype.get(), pdur.get(),                                                          pqty.get(), prcat.get())).grid(column=10, row=12, sticky='W')            Button(rent, text="Print", command=lambda:self.Print_Record(pr_detail.get(), pcust.get(), pqty.get())).grid(                column=55, row=12, sticky='W')            Button(rent, text="Close", command=lambda:self.close(rent)).grid(column=45, row=12, sticky='W')    def PurchaseProduct(self):        filewin = Toplevel()        mainframe = LabelFrame(filewin, text="Please choose the product from the dropdown below:")        mainframe.grid(column=45, row=0, sticky='W')        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        cur.execute("SELECT Pname from PRODUCT where qty>0")        rows = cur.fetchall()        choices = ""        for row in rows:            choices = choices + row[0] + ","        choices = choices.split(",")        self.dropVarPer = StringVar()        self.dropVarPer.set("Click to view options")  # default choice        self.dropMenuPer = OptionMenu(mainframe, self.dropVarPer, *choices)        self.dropMenuPer.pack()        self.dropVarPer.trace("w", self.change_dropdownp)    def change_dropdownp(self, *args):        s = self.dropVarPer.get()        if s != "Click to view options":            filewin = Toplevel()            conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                    port="5432")            cur = conn.cursor()            cur.execute("SELECT pname,ptype,category from Product where pname='" + s + "'")            rows = cur.fetchall()            pname = ""            ptype = ""            pcategory = ""            for row in rows:                pname = row[0]                ptype = row[1]                pcategory = row[2]            prchse = ttk.LabelFrame(filewin, text='  Purchase a Product  ')            prchse.grid(column=0, row=0, padx=8, pady=4)            ttk.Label(prchse, text="Enter Product Name:").grid(column=0, row=0, sticky='W')            prs_detail = tk.StringVar(value=pname)            ttk.Entry(prchse, textvariable=prs_detail).grid(column=45, row=0, sticky='W')            ttk.Label(prchse, text="Enter Customer Name:").grid(column=0, row=2, sticky='W')            pscust = tk.StringVar()            ttk.Entry(prchse, textvariable=pscust).grid(column=45, row=2, sticky='W')            ttk.Label(prchse, text="Enter Product Type:").grid(column=0, row=4, sticky='W')            pstype = tk.StringVar(value=ptype)            ttk.Entry(prchse, textvariable=pstype).grid(column=45, row=4, sticky='W')            ttk.Label(prchse, text="Category Of Product:").grid(column=0, row=6, sticky='W')            pcat = tk.StringVar(value=pcategory)            ttk.Entry(prchse, textvariable=pcat).grid(column=45, row=6, sticky='W')            ttk.Label(prchse, text="Enter Product Quantity:").grid(column=0, row=8, sticky='W')            psqty = tk.StringVar()            ttk.Entry(prchse, textvariable=psqty, validate='key', validatecommand=self.vcmd).grid(column=45, row=8,                                                                                                  sticky='W')            Button(prchse, text="Submit",                   command=lambda: self.Insert_Pro_Purchase_Record(prs_detail.get(), pscust.get(), pstype.get(),                                                                   psqty.get(), pcat.get())).grid(column=10, row=10,                                                                                                  sticky='W')            Button(prchse, text="Print",                   command=lambda: self.Print_Record(prs_detail.get(), pscust.get(), psqty.get())).grid(column=55,                                                                                                        row=10,                                                                                                        sticky='W')            Button(prchse, text="Close", command=lambda: self.close(prchse)).grid(column=45, row=10, sticky='W')    def Insert_Pro_Purchase_Record(self, pr_detail, pcust, ptype, pqty, pcat):        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        pprice = 0        cur = conn.cursor()        cur.execute("SELECT PPRICE From PRODUCT where PNAME='" + pr_detail + "'")        rows = cur.fetchall()        if rows:            for row in rows:                pprice = row[0]            pprice = pprice * int(pqty)            cur = conn.cursor()            cur.execute("INSERT INTO PPURCHASE (PPID, PPDETAIL,  PPCUST, PPTYPE,  PPQTY, PPRICE) VALUES \                            ('" + str(uuid.uuid4()) + "','" + pr_detail +"','" + pcust + "','" + ptype + "'," + str(pqty) + "," + str(pprice) + ")");            conn.commit()            conn.close()            conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",port="5432")            cur = conn.cursor()            cur.execute("INSERT INTO TRD (trd_date, trd_product, trd_price, trd_cid, trd_id, category) VALUES \                                    ('" + str(date.today()) + "','" + pr_detail + "'," + str(pprice) + ",'" + pcust + "','" + str(uuid.uuid4()) + "', '"+pcat+"')");            conn.commit()            conn.close()            conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",port="5432")            cur = conn.cursor()            cur.execute("UPDATE product set QTY=QTY-" + pqty + " where PNAME='" + pr_detail + "'")            mBox.showinfo('  Data Inserted Successfully  ', '  Data Inserted Successfully  ')            conn.commit()            conn.close()        else:            mBox.showinfo('  Rental System  ', "  Data Not Inserted  ")    def ReturnProduct(self):        filewin = Toplevel()        mainframe = LabelFrame(filewin, text="Select name of the Product to Return")        mainframe.grid(column=45, row=0, sticky='W')        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        cur.execute("SELECT prproduct FROM  prent where rflag = false")        rows = cur.fetchall()        choices = ""        for row in rows:            choices = choices + row[0] + ","        choices = choices.split(",")        self.dropVarReturn = StringVar()        self.dropVarReturn.set("Click to view options")  # default choice        self.dropMenuReturn = OptionMenu(mainframe, self.dropVarReturn, *choices)        self.dropMenuReturn.pack()        self.dropVarReturn.trace("w", self.change_dropdownReturn)    def change_dropdownReturn(self, *args):        s = self.dropVarReturn.get()        if s != "Click to view options":            filewin = Toplevel()            delete = ttk.LabelFrame(filewin, text='  Return Product  ')            delete.grid(column=0, row=0, padx=8, pady=4)            ttk.Label(delete, text="Name of Product:").grid(column=0, row=0, sticky='W')            pd = tk.StringVar(value=s)            ttk.Entry(delete, textvariable=pd).grid(column=45, row=0, sticky='W')            ttk.Label(delete, text="Enter Date of Return:").grid(column=0, row=1, sticky='W')            cal = DateEntry(delete, width=12, background='darkblue', foreground='white', borderwidth=2)            cal.grid(column=45, row=1, sticky='W')            def Return_Product(pd):                pdr=cal.get()                conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                        port="5432")                cur = conn.cursor()                answer = mBox.askyesno("Question", "Are you Sure to Return?")                if answer is True:                    retans = mBox.askyesno("Question", "Is Product Damaged?")                    if retans is True:                        cur.execute("UPDATE PRENT set RFLAG='True'  where PRPRODUCT='" + pd + "'");                        mBox.showinfo('  Rental System  ', "  Product Restored Successfully  ")                        conn.commit()                        conn.close()                        from datetime import datetime                        from datetime import timedelta                        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014",                                                host="127.0.0.1",                                                port="5432")                        cur = conn.cursor()                        cur.execute("SELECT PRENTDUEDATE,PRCUST,PRTYPE from PRENT where PRPRODUCT='" + pd + "'")                        rows = cur.fetchall()                        pcust = ""                        duedate = ""                        prcat = ""                        for row in rows:                            duedate = row[0]                            pcust = row[1]                            prcat = row[2]                        conn.commit()                        conn.close()                        y = int(duedate.year)                        m = int(duedate.month)                        d = int(duedate.day)                        d2 = datetime.replace(datetime.now(), y, m, d)                        pdr = cal.get_date()                        print(pdr)                        y = pdr.year                        m = pdr.month                        d = pdr.day                        d1 = datetime.replace(datetime.now(), y, m, d)                        d3 = d1 - d2                        days = int(d3.days)                        print(days)                        if (days < 0):                            days = 0                        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014",                                                host="127.0.0.1",                                                port="5432")                        cur = conn.cursor()                        cur.execute("SELECT PPRICE from PRODUCT where PNAME='" + pd + "'")                        rows = cur.fetchall()                        rate = 0                        for row in rows:                            rate = row[0]                        conn.commit()                        conn.close()                        totalamt = str((rate * days) * .50)                        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014",                                                host="127.0.0.1",                                                port="5432")                        cur = conn.cursor()                        cur.execute("INSERT INTO TRD (trd_date, trd_product, trd_price, trd_cid, trd_id, category) VALUES \                                                                                                ('" + str(                            date.today()) + "','" + pd + "'," + str(                            totalamt) + ",'" + pcust + "','" + str(uuid.uuid4()) + "', '" + prcat + "')");                        conn.commit()                        conn.close()                        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014",                                                host="127.0.0.1",                                                port="5432")                        cur = conn.cursor()                        cur.execute("SELECT pqty from PRENT where PRPRODUCT='" + pd + "'")                        rows = cur.fetchall()                        qty = 0                        for row in rows:                            qty = row[0]                        conn.commit()                        conn.close()                        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014",                                                host="127.0.0.1",                                                port="5432")                        cur = conn.cursor()                        cur.execute("Update Product SET QTY=QTY+" + str(qty) + " where PNAME='" + pd + "'")                        conn.commit()                        conn.close()                        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014",                                                host="127.0.0.1",                                                port="5432")                        cur = conn.cursor()                        cur.execute("INSERT INTO DAMAGED (DID,DPNAME,DPQTY,DAMT) "                                    "VALUES ('"+str(uuid.uuid4())+"','"+pd+"',"+str(qty)+","+str(totalamt)+")")                        conn.commit()                        conn.close()                    else:                        cur.execute("UPDATE PRENT set RFLAG='True'  where PRPRODUCT='" + pd + "'");                        mBox.showinfo('  Rental System  ', "  Product Returned Successfully  ")                        conn.commit()                        conn.close()                        from datetime import datetime                        from datetime import timedelta                        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                                port="5432")                        cur = conn.cursor()                        cur.execute("SELECT PRENTDUEDATE,PRCUST,PRTYPE from PRENT where PRPRODUCT='" + pd + "'")                        rows = cur.fetchall()                        pcust=""                        duedate = ""                        prcat=""                        for row in rows:                            duedate = row[0]                            pcust   = row[1]                            prcat  =row[2]                        conn.commit()                        conn.close()                        y = int(duedate.year)                        m = int(duedate.month)                        d = int(duedate.day)                        d2 = datetime.replace(datetime.now(), y, m, d)                        pdr = cal.get_date()                        print(pdr)                        y = pdr.year                        m = pdr.month                        d = pdr.day                        d1 = datetime.replace(datetime.now(), y, m, d)                        d3 = d1 - d2                        days = int(d3.days)                        print(days)                        if(days<0):                            days=0                        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                                port="5432")                        cur = conn.cursor()                        cur.execute("SELECT PPRICE from PRODUCT where PNAME='" + pd + "'")                        rows = cur.fetchall()                        rate = 0                        for row in rows:                            rate = row[0]                        conn.commit()                        conn.close()                        totalamt = str((rate * days) * .50)                        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                                port="5432")                        cur = conn.cursor()                        cur.execute("INSERT INTO TRD (trd_date, trd_product, trd_price, trd_cid, trd_id, category) VALUES \                                                                        ('" + str(date.today()) + "','" + pd + "'," + str(                            totalamt) + ",'" + pcust + "','" + str(uuid.uuid4()) + "', '" + prcat + "')");                        conn.commit()                        conn.close()                        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                                port="5432")                        cur = conn.cursor()                        cur.execute("SELECT pqty from PRENT where PRPRODUCT='" + pd + "'")                        rows = cur.fetchall()                        qty=0                        for row in rows:                            qty = row[0]                        conn.commit()                        conn.close()                        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                                port="5432")                        cur = conn.cursor()                        cur.execute("Update Product SET QTY=QTY+"+str(qty)+" where PNAME='" + pd + "'")                        conn.commit()                        conn.close()                else:                    mBox.showinfo('  Rental System  ', "  Data Not Returned  ")            def Calculate_amt(pd):                from datetime import datetime                from datetime import timedelta                conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",port="5432")                cur = conn.cursor()                cur.execute("SELECT PRENTDUEDATE from PRENT where PRPRODUCT='"+pd+"'")                rows = cur.fetchall()                duedate = ""                for row in rows:                    duedate = row[0]                conn.commit()                conn.close()                y = int(duedate.year)                m = int(duedate.month)                d = int(duedate.day)                d2 = datetime.replace(datetime.now(), y, m, d)                pdr=cal.get_date()                print(pdr)                y = pdr.year                m = pdr.month                d = pdr.day                d1 = datetime.replace(datetime.now(), y, m, d)                d3 = d1 - d2                days=int(d3.days)                print(days)                if (days < 0):                    days = 0                conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                        port="5432")                cur = conn.cursor()                cur.execute("SELECT PPRICE from PRODUCT where PNAME='" + pd + "'")                rows = cur.fetchall()                rate=0                for row in rows:                    rate = row[0]                conn.commit()                conn.close()                totalamt=str((rate*days)*.50)                mainf = LabelFrame(filewin, text="Today's Sale")                mainf.grid(column=0, row=1, sticky='W')                Label(mainf, text="Product Retrun Amount").grid(column=0, row=1, sticky='W')                Label(mainf, text="Total :"+totalamt).grid(column=1, row=1, sticky='W')            def Print_Report(pd):                from datetime import datetime                from datetime import timedelta                conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                        port="5432")                cur = conn.cursor()                cur.execute("SELECT PRENTDUEDATE,PRCUST from PRENT where PRPRODUCT='" + pd + "'")                rows = cur.fetchall()                pcust = ""                for row in rows:                    duedate = row[0]                    pcust = row[1]                conn.commit()                conn.close()                y = int(duedate.year)                m = int(duedate.month)                d = int(duedate.day)                d2 = datetime.replace(datetime.now(), y, m, d)                pdr = cal.get_date()                print(pdr)                y = pdr.year                m = pdr.month                d = pdr.day                d1 = datetime.replace(datetime.now(), y, m, d)                d3 = d2 - d1                days = int(d3.days)                print(days)                conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                        port="5432")                cur = conn.cursor()                cur.execute("SELECT PPRICE from PRODUCT where PNAME='" + pd + "'")                rows = cur.fetchall()                rate = 0                for row in rows:                    rate = row[0]                conn.commit()                conn.close()                totalamt = str((rate * days) * .50)                f = open("demofile.txt", "w")                f.write("    RETURN RECEIPT          \n")                f.write("No.14 dated:")                f.write(str(date.today()) + "\n")                f.write("  Mahatma Gandhi Marg,  \n")                f.write("  Hazratganj, Lucknow   \n")                f.write("*********************** \n")                f.write(" Thanks for Coming      \n")                f.write("    WHEE Sports         \n")                f.write("*********************** \n")                f.write("Name ***********Amount \n")                f.write(pd[0:11].ljust(11,' '))                f.write("        ")                f.write(str(totalamt))                f.write("              ")                f.write("\n             ----------\n")                f.write("TOTAL:             ")                f.write(str(totalamt))                f.write("\n             ----------\n")                f.write("Thanks ")                f.write(pcust)                os.startfile("demofile.txt", "print")            Button(delete, text="Calculate Amount", command=lambda :Calculate_amt(pd.get())).grid(column=10, row=10, sticky='W')            Button(delete, text="Return Product", command=lambda: Return_Product(pd.get())).grid(column=45, row=10, sticky='W')            Button(delete, text="Print Reciept", command=lambda: Print_Report(pd.get(),)).grid(column=55, row=10,                                                                                                 sticky='W')    def RegisterEmp(self):        filewin = Toplevel(root)        regemp = ttk.LabelFrame(filewin, text=' Register Employee')        regemp.grid(column=0, row=0, padx=8, pady=4)        ttk.Label(regemp, text="Enter Employee Name:").grid(column=0, row=0, sticky='W')        uname = tk.StringVar()        ttk.Entry(regemp, textvariable=uname).grid(column=45, row=0, sticky='W')        ttk.Label(regemp, text="Enter Employee Age:").grid(column=0, row=6, sticky='W')        age = tk.StringVar()        ttk.Entry(regemp, textvariable=age, validate='key', validatecommand=self.vcmd).grid(column=45, row=6, sticky='W')        ttk.Label(regemp, text="Enter Address of Employee:").grid(column=0, row=8, sticky='W')        address = tk.StringVar()        ttk.Entry(regemp, textvariable=address).grid(column=45, row=8, sticky='W')        ttk.Label(regemp, text="Enter Date of Joining:").grid(column=0, row=10, sticky='W')        doj = tk.StringVar()        cal = DateEntry(regemp, width=12, background='darkblue', foreground='white', borderwidth=2)        cal.grid(column=45, row=10, sticky='W')        ttk.Label(regemp, text="Enter Mobile Number:").grid(column=0, row=12, sticky='W')        mob = tk.StringVar()        ttk.Entry(regemp, textvariable=mob, validate='key', validatecommand=self.vcmd).grid(column=45, row=12, sticky='W')        Button(regemp, text="Submit",               command=lambda:self.insert_user(uname.get(), age.get(), address.get(),                                           cal.get_date(),                                           mob.get())).grid(column=10, row=14, sticky='W')        Button(regemp, text="Close", command=lambda: self.close(regemp)).grid(column=45, row=14, sticky='W')    def insert_user(self,uname, age, address, doj, mob):       conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")       cur = conn.cursor()       upwd = "Admin@123"       ustatus = "Active"       dor = "11/11/1111"       uid = uuid.uuid4()       try:           cur.execute("insert into usr (uid, uname, upwd, ustatus, age, address, DOJ, DOR, mnum)\                                VALUES ('" + str(               uid) + "', '" + uname + "', '" + upwd + "', '"+ ustatus + "', " + str(               age) + ", '" + address + "', '" + str(doj) + "', '" + dor + "', '" + mob + "');")           mBox.showinfo('  Rental System  ', "  Data Inserted Successfully  ")       except:            mBox.showinfo('  Rental System  ', "  Data Not Inserted  ")       conn.commit()       conn.close()    def change_dropdown_delete_emp(self, *args):        s = self.dropVarDelEmp.get()        if s != "Click to view options":            filewin = Toplevel()            conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                    port="5432")            cur = conn.cursor()            cur.execute("SELECT * from USR where uname='" + s + "'")            rows = cur.fetchall()            pname = ""            for row in rows:                pname = row[1]            delete = ttk.LabelFrame(filewin, text='  Remove Employee  ')            delete.grid(column=0, row=0, padx=8, pady=4)            ttk.Label(delete, text="Enter Emp Name:").grid(column=0, row=0, sticky='W')            pd = tk.StringVar(value=pname)            ttk.Entry(delete, textvariable=pd).grid(column=45, row=0, sticky='W')            ttk.Label(delete, text="Enter Date of Relieving:").grid(column=0, row=1, sticky='W')            pdr = tk.StringVar()            cal = DateEntry(delete, width=12, background='darkblue', foreground='white', borderwidth=2)            cal.grid(column=45, row=1, sticky='W')            Button(delete, text="Submit", command=lambda: self.DeleteEmp(pd.get(), cal.get_date())).grid(column=10, row=10,                                                                                                    sticky='W')            Button(delete, text="Close", command=lambda: self.close(delete)).grid(column=45, row=10, sticky='W')    def DelEmp(self):        filewin = Toplevel()        # Add a grid        mainframe = LabelFrame(filewin, text="Show Name of The Employee to Delete")        mainframe.grid(column=45, row=0, sticky='W')        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        cur.execute("SELECT uname from USR where dor = '11/11/1111'")        rows = cur.fetchall()        choices = ""        for row in rows:            choices = choices + row[0] + ","        choices = choices.split(",")        self.dropVarDelEmp = StringVar()        self.dropVarDelEmp.set("Click to view options")  # default choice        self.dropMenuDelEmp = OptionMenu(mainframe, self.dropVarDelEmp, *choices)        self.dropMenuDelEmp.pack()        self.dropVarDelEmp.trace("w", self.change_dropdown_delete_emp)        print(self.dropVarDelEmp.get())    def DeleteEmp(self, pd, pdr):        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        answer = mBox.askyesno("Question", "Are you Sure to Delete?")        if answer is True:            cur.execute("UPDATE USR set DOR='" + str(pdr) + "'  , USTATUS='Inactive' where UNAME='" + pd + "'");            mBox.showinfo('  Rental System  ', "  Data Deleted Successfully  ")            conn.commit()            conn.close()        else:            mBox.showinfo('  Rental System  ', "  Data Not Deleted  ")    def ofHelp(self):        try:  # for Python2            import Tkinter as tk            import ScrolledText as tkst        except ImportError:            # for Python3            import tkinter as tk            import tkinter.scrolledtext as tkst        filename = "HELP.txt"        filewin = Toplevel(root)        frame = tk.Frame(filewin, bg='brown')        frame.pack(fill='both', expand='yes')        edit_space = tkst.ScrolledText(            master=frame,            wrap='word',  # wrap text at full words only            width=25,  # characters            height=10,  # text lines            bg='beige'  # background color of edit area        )        edit_space.pack(fill='both', expand=True, padx=8, pady=8)        text = open(filename, 'r').read()        edit_space.insert('insert', text)    def _login_btn_clicked(self):        # print("Clicked")        from datetime import datetime        username = self.entry_username.get()        password = self.entry_password.get()        pwd = ""        ustatus = ""        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1", port="5432")        cur = conn.cursor()        cur.execute("SELECT upwd,ustatus from usr where uname='" + username + "'")        rows = cur.fetchall()        for row in rows:           pwd = row[0]           ustatus = row[1]        if password == pwd and ustatus == "Admin":            self.destroy()            mBox.showinfo('  Rental System  ', "  Welcome to the Whee Sports  ")            menubar = Menu(root)            filemenu = Menu(menubar, tearoff=0)            filemenu.add_command(label="Add", command=self.AddStock)            filemenu.add_command(label="Update ", command=self.UpdateStock)            filemenu.add_command(label="Delete", command=self.DeleteStock)            filemenu.add_command(label="Delete Damaged Goods", command=self.DeleteGoods)            filemenu.add_command(label="Search", command=self.Search)            filemenu.add_command(label="Add Category", command=self.AddCategory)            filemenu.add_command(label="Remove Category", command=self.RemCategory)            filemenu.add_separator()            menubar.add_cascade(label="Stock", menu=filemenu)            editmenu = Menu(menubar, tearoff=0)            editmenu.add_command(label="Rent", command=self.RentProduct)            editmenu.add_separator()            editmenu.add_command(label="Purchase", command=self.PurchaseProduct)            editmenu.add_separator()            editmenu.add_command(label="Return", command=self.ReturnProduct)            menubar.add_cascade(label="Retail", menu=editmenu)            helpmenu = Menu(menubar, tearoff=0)            helpmenu.add_command(label="Register", command=self.RegisterEmp)            helpmenu.add_command(label="Remove", command=self.DelEmp)            menubar.add_cascade(label="Employee", menu=helpmenu)            rmenu = Menu(menubar, tearoff=0)            rmenu.add_command(label="Stock", command=self.Show_Stock)            rmenu.add_command(label="Show Current Employee", command=self.Emp_Record)            rmenu.add_command(label="Show Damaged Goods", command=self.Show_DGoods)            menubar.add_cascade(label="Report", menu=rmenu)            smenu = Menu(menubar, tearoff=0)            smenu.add_command(label="Daily", command=self.Today_Sale)            smenu.add_command(label="Weekly", command=self.Weekly_Sale)            smenu.add_command(label="Monthly", command=self.Monthly_Sale)            smenu.add_command(label="Bi-Annually", command=self.Halfyearly_Sale)            smenu.add_command(label="Annually", command=self.Annual_Sale)            menubar.add_cascade(label="Sale", menu=smenu)            hmenu = Menu(menubar, tearoff=0)            hmenu.add_command(label="Help", command=self.ofHelp)            menubar.add_cascade(label="Help", menu=hmenu)            image = tk.PhotoImage(file="ball_50.gif")            s = datetime.now().strftime("%a,%d %B,%y")            label = tk.Label(text="Today is:" + str(s), fg="Green", font="Verdana 10 bold")            label.pack()            label = tk.Label(image=image)            label.pack()             # Mail Sending Code For Low Stock            try:                quantity=0                conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                        port="5432")                cur = conn.cursor()                cur.execute("SELECT pname, qty FROM product where qty<=10")                rows = cur.fetchall()                if rows:                    stock = "<tr><td>Name of Product</td><td>Quantity</td></tr>"                    for row in rows:                        stock += "<tr><td>" + str(row[0]) + "</td><td>" + str(row[1]) + "</td></tr>"                        quantity=int(row[1])                    if quantity<=10:                        import smtplib                        msg_header = 'From: Rental System <rentalsystem0@gmail.com>\n' \                                     'To: Rental System <rentalsystem0@gmail.com>\n' \                                     'MIME-Version: 1.0\n' \                                     'Content-type: text/html\n' \                                     'Subject: Low On Stock\n'                        title = 'Stock'                        msg_content = '<h2><font color="green"> Dear Employee,\n ' \                                      'your following stock is low: </h2>'                        msg_content += stock                        msg_content += '\n <h2 style="color:red;">This is a system generated e-mail. Please do not respond.' \                                       '</font></h2>\n'.format(title=title)                        msg_full = (''.join([msg_header, msg_content])).encode()                        server = smtplib.SMTP('smtp.gmail.com:587')                        server.starttls()                        server.login('rentalsystem0@gmail.com', 'ComputerScience')                        server.sendmail('rentalsystem0@gmail.com',                                        ['rentalsystem0@gmail.com'],                                        msg_full)                        server.quit()                    # Code End here                    # Mail Sending Code Rent Duration                prdct=""                pqty=0                conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                        port="5432")                cur = conn.cursor()                cur.execute("SELECT prproduct, prcust, pqty  FROM prent where prentduedate='"+str(date.today())+"' OR rflag='FALSE'")                rows = cur.fetchall()                if rows:                    stock = "<tr><td>Name of Product</td><td>Name of Customer</td><td>Quantity</td></tr>"                    for row in rows:                        prdct=row[0]                        pqty=row[2]                        stock += "<tr><td>" + str(row[0]) + "</td><td>" + str(row[1]) + "</td><td>" + str(row[2]) + "</td></tr>"                    import smtplib                    msg_header = 'From: Rental System <rentalsystem0@gmail.com>\n' \                                 'To: Rental System <rentalsystem0@gmail.com>\n' \                                 'MIME-Version: 1.0\n' \                                 'Content-type: text/html\n' \                                 'Subject: Stock Retrieval\n'                    title = 'Stock'                    msg_content = '<h2><font color="green">Dear Employee,\n ' \                                  'your following stock needs to be retrieved: </h2>'                    msg_content += stock                    msg_content += '\n <h2 style="color:red;">This is a system generated e-mail. Please do not respond.' \                                   '</font></h2>\n'.format(title=title)                    msg_full = (''.join([msg_header, msg_content])).encode()                    server = smtplib.SMTP('smtp.gmail.com:587')                    server.starttls()                    server.login('rentalsystem0@gmail.com', 'ComputerScience')                    server.sendmail('rentalsystem0@gmail.com',                                        ['rentalsystem0@gmail.com'],                                        msg_full)                    conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",port="5432")                    cur = conn.cursor()                    cur.execute("Update product SET qty=qty+" + str(pqty) + " where pname='" + prdct + "'")                    conn.commit()                    conn.close()                    server.quit()            except:                print("hello")                root.config(menu=menubar)                root.mainloop()            else:                root.config(menu=menubar)                root.mainloop()        # Code End here        else:            if password == pwd and ustatus == "Active":                self.destroy()                mBox.showinfo('  Rental System  ', "  Welcome to the Whee Sports  ")                menubar = Menu(root)                filemenu = Menu(menubar, tearoff=0)                filemenu.add_command(label="Add", command=self.AddStock)                filemenu.add_command(label="Update ", command=self.UpdateStock)                filemenu.add_command(label="Delete", command=self.DeleteStock)                filemenu.add_command(label="Search", command=self.Search)                filemenu.add_command(label="Add Category", command=self.AddCategory)                filemenu.add_command(label="Remove Category", command=self.RemCategory)                filemenu.add_separator()                menubar.add_cascade(label="Stock", menu=filemenu)                editmenu = Menu(menubar, tearoff=0)                editmenu.add_command(label="Rent", command=self.RentProduct)                editmenu.add_separator()                editmenu.add_command(label="Purchase", command=self.PurchaseProduct)                editmenu.add_separator()                editmenu.add_command(label="Return", command=self.ReturnProduct)                menubar.add_cascade(label="Retail", menu=editmenu)                hmenu = Menu(menubar, tearoff=0)                hmenu.add_command(label="Help", command=self.ofHelp)                menubar.add_cascade(label="Help", menu=hmenu)                image = tk.PhotoImage(file="ball_50.gif")                s = datetime.now().strftime("%a,%d %B,%y")                label = tk.Label(justify=tk.LEFT, text="Today is:" + str(s), fg="Green", font="Verdana 10 bold")                label.pack()                label = tk.Label(image=image)                label.pack()                try:                    quantity = 0                    conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                            port="5432")                    cur = conn.cursor()                    cur.execute("SELECT pname, qty FROM product where qty<=10")                    rows = cur.fetchall()                    if rows:                        stock = "<tr><td>Name of Product</td><td>Quantity</td></tr>"                        for row in rows:                            stock += "<tr><td>" + str(row[0]) + "</td><td>" + str(row[1]) + "</td></tr>"                            quantity = int(row[1])                        if quantity <= 10:                            import smtplib                            msg_header = 'From: Rental System <rentalsystem0@gmail.com>\n' \                                         'To: Rental System <rentalsystem0@gmail.com>\n' \                                         'MIME-Version: 1.0\n' \                                         'Content-type: text/html\n' \                                         'Subject: Low On Stock\n'                            title = 'Stock'                            msg_content = '<h2><font color="green">Dear Employee,\n ' \                                          'your following stock is low: </h2>'                            msg_content += stock                            msg_content += '\n <h2 style="color:red;">This is a system generated e-mail. Please do not respond.' \                                           '</font></h2>\n'.format(title=title)                            msg_full = (''.join([msg_header, msg_content])).encode()                            server = smtplib.SMTP('smtp.gmail.com:587')                            server.starttls()                            server.login('rentalsystem0@gmail.com', 'ComputerScience')                            server.sendmail('rentalsystem0@gmail.com',                                            ['rentalsystem0@gmail.com'],                                            msg_full)                            server.quit()                        # Code End here                        # Mail Sending Code Rent Duration                    prdct = ""                    pqty = 0                    conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014", host="127.0.0.1",                                            port="5432")                    cur = conn.cursor()                    cur.execute(                        "SELECT prproduct, prcust, pqty  FROM prent where prentduedate='" + str(date.today()) + "' OR rflag='FALSE' ")                    rows = cur.fetchall()                    if rows:                        stock = "<tr><td>Name of Product</td><td>Name of Customer</td><td>Quantity</td></tr>"                        for row in rows:                            prdct = row[0]                            pqty = row[2]                            stock += "<tr><td>" + str(row[0]) + "</td><td>" + str(row[1]) + "</td><td>" + str(                                row[2]) + "</td></tr>"                        import smtplib                        msg_header = 'From: Rental System <rentalsystem0@gmail.com>\n' \                                     'To: Rental System <rentalsystem0@gmail.com>\n' \                                     'MIME-Version: 1.0\n' \                                     'Content-type: text/html\n' \                                     'Subject: Stock Retrieval\n'                        title = 'Stock'                        msg_content = '<h2><font color="green">Dear Employee,\n ' \                                      'your following stock needs to be retrieved: </h2>'                        msg_content += stock                        msg_content += '\n <h2 style="color:red;">This is a system generated e-mail. Please do not respond.' \                                       '</font></h2>\n'.format(title=title)                        msg_full = (''.join([msg_header, msg_content])).encode()                        server = smtplib.SMTP('smtp.gmail.com:587')                        server.starttls()                        server.login('rentalsystem0@gmail.com', 'ComputerScience')                        server.sendmail('rentalsystem0@gmail.com',                                        ['rentalsystem0@gmail.com'],                                        msg_full)                        conn = psycopg2.connect(database="rental", user="postgres", password="Sam@2014",                                                host="127.0.0.1", port="5432")                        cur = conn.cursor()                        cur.execute("Update product SET qty=qty+" + str(pqty) + " where pname='" + prdct + "'")                        conn.commit()                        conn.close()                        server.quit()                except:                    print("hello")                    root.config(menu=menubar)                    root.mainloop()                else:                    root.config(menu=menubar)                    root.mainloop()            else:                mBox.showwarning('  Error  ', "  Please Insert Correct Username and Password  ")    def close(self,parent):        parent.quit()root = Tk()s = ttk.Style(root)s.theme_use('clam')lf = LoginFrame(root)root.title("Rental System")root.mainloop()